<html>

<head>
	<title>BKR Meeting</title>
	<meta name="viewport" content="width=device-width, initial-scale=1" charset="utf-8">
	</meta>
	<link rel="shortcut icon" href="images/favicon.ico" type="image/x-icon">
	</link>
	<script src="https://code.jquery.com/jquery-3.3.1.min.js"
		integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
		integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
	</link>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"
		integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa"
		crossorigin="anonymous"></script>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
	</link>
	<link rel="styleSheet" href="/static/session/css/main.css" type="text/css" media="screen">
	</link>
	<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
	<script src="/static/session/js/openvidu-browser-2.13.0.js"></script>
</head>

<body>
	<div id="main-container" class="container">
		<div id="logged">
			<div id="session">
				<div id="session-header">
					<h1 id="session-title" style="margin-top:20px"><%= sessionName %></h1>
					<form action="/leave-session" method="post">
						<input type="hidden" name="sessionname" value="<%= sessionName %>"></input>
						<input type="hidden" name="token" value="<%= token %>"></input>
						<button id="buttonLeaveSession" class="btn btn-danger btn-circle btn-lg" type="submit"
							onclick="leaveSession()">
							<i class="material-icons" style="color:white;font-size:130%;">call_end</i>
						</button>
						<button id="toggleAudio" class="btn btn-warning btn-circle btn-lg">
							<i class="material-icons" style="color:white;font-size:130%;">mic_off</i>
						</button>
					</form>
				</div>
				<div id="main-video" class="col-md-6">
					<p class="nickName"></p>
					<p class="userName"></p>
					<video autoplay="true" playsinline="true"></video>
				</div>
				<div id="video-container" class="col-md-6"></div>
			</div>
		</div>
	</div>

	<script>
		var sessionName = <%- JSON.stringify(sessionName) %>;
		var token = <%- JSON.stringify(token) %>;
		var nickName = <%- JSON.stringify(nickName) %>;
		var userName = <%- JSON.stringify(userName) %>;

		console.warn('Request of TOKEN gone WELL (TOKEN:' + token + ')');
		OV = new OpenVidu();
		session = OV.initSession();
		session.on('streamCreated', (event) => {
			var subscriber = session.subscribe(event.stream, 'video-container');
			subscriber.on('videoElementCreated', (event) => {
				appendUserData(event.element, subscriber.stream.connection);
			});
		});

		session.on('streamDestroyed', (event) => {
			removeUserData(event.stream.connection);
		});

		session.connect(token, { clientData: nickName })
			.then(() => {
				$('#session-title').text(sessionName);
				$('#join').hide();
				$('#session').show();
				var publisher = OV.initPublisher('video-container', {
					audioSource: undefined,
					videoSource: undefined,
					publishAudio: true,
					publishVideo: true,
					resolution: '640x480',
					frameRate: 30,
					insertMode: 'APPEND',
					mirror: false
				});
				publisher.on('videoElementCreated', (event) => {
					var userData = {
						nickName: nickName,
						userName: userName
					};
					initMainVideo(event.element, userData);
					appendUserData(event.element, userData);
					$(event.element).prop('muted', true);
				});
				session.publish(publisher);
			})
			.catch(error => {
				console.warn('There was an error connecting to the session:', error.code, error.message);
			});

		function leaveSession() {
			session.disconnect();
		}

		function appendUserData(videoElement, connection) {
			var clientData;
			var serverData;
			var nodeId;
			if (connection.nickName) {
				clientData = connection.nickName;
				serverData = connection.userName;
				nodeId = 'main-videodata';
			} else {
				clientData = JSON.parse(connection.data.split('%/%')[0]).clientData;
				serverData = JSON.parse(connection.data.split('%/%')[1]).serverData;
				nodeId = connection.connectionId;
			}
			var dataNode = document.createElement('div');
			dataNode.className = "data-node";
			dataNode.id = "data-" + nodeId;
			dataNode.innerHTML = '<p class="nickName">' + clientData + '</p><p class="userName">' + serverData + '</p>';
			videoElement.parentNode.insertBefore(dataNode, videoElement.nextSibling);
			addClickListener(videoElement, clientData, serverData);
		}

		function removeUserData(connection) {
			var userNameRemoved = $("#data-" + connection.connectionId);
			if ($(userNameRemoved).find('p.userName').html() === $('#main-video p.userName').html()) {
				cleanMainVideo();
			}
			$("#data-" + connection.connectionId).remove();
		}

		function removeAllUserData() {
			$(".data-node").remove();
		}

		function cleanMainVideo() {
			$('#main-video video').get(0).srcObject = null;
			$('#main-video p').each(function () {
				$(this).html('');
			});
		}

		function addClickListener(videoElement, clientData, serverData) {
			videoElement.addEventListener('click', function () {
				var mainVideo = $('#main-video video').get(0);
				if (mainVideo.srcObject !== videoElement.srcObject) {
					$('#main-video').fadeOut("fast", () => {
						$('#main-video p.nickName').html(clientData);
						$('#main-video p.userName').html(serverData);
						mainVideo.srcObject = videoElement.srcObject;
						$('#main-video').fadeIn("fast");
					});
				}
			});
		}

		function initMainVideo(videoElement, userData) {
			$('#main-video video').get(0).srcObject = videoElement.srcObject;
			$('#main-video p.nickName').html(userData.nickName);
			$('#main-video p.userName').html(userData.userName);
			$('#main-video video').prop('muted', true);
		}

	</script>
</body>

</html>
