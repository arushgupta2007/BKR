<html>

<head>
    <title>BKR Meeting</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" charset="utf-8" ? />
    <!-- <link rel="shortcut icon" href="images/favicon.ico" type="image/x-icon" /> -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
    <script src='https://kit.fontawesome.com/a076d05399.js'></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.0.0/p5.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script src="/static/head_imports.js"></script>

    <!-- CodeMirror -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.17.0/codemirror.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.17.0/codemirror.css" />

    <!-- Firepad -->
    <link rel="stylesheet" href="https://firepad.io/releases/v1.5.10/firepad.css" />
    <script src="https://firepad.io/releases/v1.5.10/firepad.min.js"></script>
    
    <script src="/static/session/js/openvidu-browser-2.14.0.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css">
    <link rel="styleSheet" href="/static/session/css/main.css" type="text/css" media="screen" />
</head>

<body>
    <header class="navbar navbar-expand navbar-dark flex-column flex-md-row bg-dark py-1" id="navbar_session">
        <a href="/" class="navbar-brand mr-0 mr-md-2" aria-label="BKR">
            <img src="/static/home/images/BKR.PNG" alt="Logo" width="52" height="28"/>
        </a>
        <span class="navbar-text mr-0 mr-md-2 mx-auto"><%= meetingName %></span>
        <ul class="navbar-nav ml-md-auto">
        </ul>
    </header>
    <div class="modal fade" id="whiteboard_model" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content" id="whiteboard-model-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="modalLabel">White Board</h3>
                    <button class="btn btn-primary" id="clear-board">Clear board</button>
                </div>
                <div class="modal-body" id="canvas-container">
                    <!-- <canvas id="whiteboard"></canvas> -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="backToVideoAudio()">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="share_meeting_modal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Share Meeting</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Give this link: <a id="share_meeting_link"></a> with the meeting code to allow somebody else to join the meeting</p>
                    <h4>OR</h4>
                    <p>Share this ID: <%= sessionName %> with the session code to allow somebody else to join the meeting</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>

    <div class="modal fade" id="collab" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">collaboration</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <div id="firepad"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="sidePanel" id="sidePanel">
        <div class="pull-left" id="tabs-chat">
            <button class="chat-person active text-truncate" id="everybody">Everybody</button>
        </div>
        <div class="chat-content">
            <div class="card h-100">
                <div class="card-header text-center text-truncate" id="card-header-chat">
                    Everybody
                    <button class="btn pull-right" onclick="closeSidePanel()"><i class="fas fa-times-circle" style="color: red;"></i></button>
                </div>
                <div class="card-body p-0" id="all-chats">
                    <div class="chat-messages" id="chat-everybody"></div>
                </div>
                <div class="card-footer">
                    <div class="form-group">
                        <textarea id="message-to-send" rows="4" class="mb-3 form-control" placeholder="Send a message..."></textarea>
                    </div>
                    <button class="btn btn-primary btn-lg" id="sumbit-new-message" onclick="sendMessage()"><i class="fas fa-location-arrow" style="transform: rotate(40deg)"></i></button>
                </div>
            </div>
        </div>
    </div>
    
    <div id="main-container" class="container-fluid p-0">
        <div class="meetingOptionsExtra">
            <div class="btn-group-vertical" role="group" aria-label="Meeting Options">
                <button type="button" class="btn btn-secondary btn-lg" onclick="toggleParticipantList()">
                    <i class="fas fa-user-friends"></i>
                </button>
                <button type="button" class="btn btn-secondary btn-lg" onclick="togglePrevMeetings()">
                    <i class="fas fa-history"></i>
                </button>
                <form action="/session/refresh" method="post" style="display: inline-block; margin-bottom: 0;">
                    <input type="hidden" name="sessionname" value="<%= sessionName %>" />
                    <input type="hidden" name="token" value="<%= token %>" />
                    <input type="hidden" name="name" value="<%= nickName %>" />
                    <input type="hidden" name="meetingId" value="<%= sessionName %>" />
                    <input type="hidden" name="meetingCode" value="<%= code %>" />
                    <button class="btn btn-secondary btn-lg" type="submit" onclick="leaveSession()" id="refreshButton"><i class="fas fa-sync"></i></button>
                </form>
            </div>
        </div>
        
        <div id="participantList_sideBar"></div>
        <div id="prevMeetingList_sideBar" class="d-flex justify-content-center"></div>
        
        <div class="inline-block" id="video_container">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item p-0">
                    <a class="nav-link active" data-toggle="tab" href="#gridParticipants"><i class="fas fa-border-all in-white-back"></i> Grid View</a>
                </li>
                <li class="nav-item p-0">
                    <a class="nav-link" data-toggle="tab" href="#pinnedVid"><i class="fas fa-thumbtack in-white-back"></i> Pinned</a>
                </li>
            </ul>
            <div class="tab-content">
                <div id="gridParticipants" class="container-fluid tab-pane active"><br>
                    <div class="row justify-content-center" id="gridViewVideoContainer"></div>                    
                </div>
                <div id="pinnedVid" class="container-fluid tab-pane fade"><br>
                    <div class="row" id="pinnedVideoContainer"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="fixed-bottom text-center" id="meetingOptionsButton_User">
        <button class="btn btn-warning pull-left" onclick="shareMeeting()" data-toggle="tooltip" data-placement="top" title="Add Person To Call">
            <i class="fas fa-user-plus"></i>
        </button>
        <button id="toggleVideo" class="btn btn-primary" onclick="toggleVideo()" data-toggle="tooltip" data-placement="top" title="Video">
            <i class="fas fa-video" id="toggleVideoIcon"></i>
        </button>
        <button id="toggleAudio" class="btn btn-success" onclick="toggleAudio()" data-toggle="tooltip" data-placement="top" title="Audio">
            <i class="fas fa-microphone" id="toggleAudioIcon"></i>
        </button>
        <form action="/leave-session" method="post" style="display: inline-block; margin-bottom: 0;">
            <input type="hidden" name="sessionname" value="<%= sessionName %>" />
            <input type="hidden" name="token" value="<%= token %>" />
            <button id="buttonLeaveSession" class="btn btn-danger" type="submit" onclick="leaveSession()" data-toggle="tooltip" data-placement="top" title="Leave Call">
                <i class="fas fa-phone" style="transform: rotate(-135deg);"></i>
            </button>
        </form>
        <div class="btn-group dropup">
            <button type="button" class="btn dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="background-color: transparent; color: white; font-size: 175%; height: 30px;">
            </button>
            <div class="dropdown-menu">
                <button class="btn dropdown-item" onclick="screenShare()"><i class="fas fa-share-square in-white-back"></i> Share Screen</button>
                <button class="btn dropdown-item" onclick="whiteboard_open()"><i class="fas fa-pencil-alt in-white-back"></i> Whiteboard</button>
                <button class="btn dropdown-item" onclick="collabOpen()"><i class="fas fa-handshake" style="color:black;"></i> Collab</button>
            </div>
        </div>
        <buton class="btn pull-right" id="chat-open-close" onclick="toggleSidePanel()" data-toggle="tooltip" data-placement="top" title="Chat">
            <i class="fas fa-comment-alt"></i>
        </buton>
    </div>
    <div id="snackbar-info-container">
        <div class="snackbar-info text-truncate" id="notification"></div>
    </div>
    <audio src="/static/session/audio/unconvinced.mp3" id="chat-audio"></audio>
    <script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/showdown@1.9.1/dist/showdown.min.js"></script>
    <script src="/static/session/js/main.js"></script>
    <script>
        // script to create whiteboard
        // keep track of where the mouse has been dragged on
        var array_of_mouse_loactions = [];
        
        // sketch for p5 js
        let sketch = function(p) {            
            document.getElementById("clear-board").addEventListener('click', function() {
                clearWhiteBoard();
            })

            function clearWhiteBoard () {
                p.background(0);
            }

            // setup function
            p.setup = function(){
                /* var width = window.document.getElementById("canvas-container").style.width;
                // var height = $(window).width - 100; */
                // create canvas with size 640, 480
                p.createCanvas(640, 480);
                // background of black color
                p.background(0);
            }
            // function called when mouse is dragged
            p.mouseDragged = function () {
                // push mouse position to mouse positions array
                array_of_mouse_loactions.push({x: p.mouseX, y: p.mouseY});
            }
            // draw function
            p.draw = function () {
                // check if mouse locations array has first item
                if (array_of_mouse_loactions[0]) {
                    // mouse location array has first item
                    // draw circle around that location
                    p.noStroke();
                    p.fill(255);
                    p.ellipse(array_of_mouse_loactions[0].x, array_of_mouse_loactions[0].y, 36, 36)
                    // remove first element from mouse locations array
                    array_of_mouse_loactions.shift();
                }
            }
        };
        // create new canvas with prev defined sketch in div of id canvas-container
        new p5(sketch, 'canvas-container');
    </script>
    <script>
        // script for main stuff
        // define publisher as global var
        var publisher;
        // get session id to display on share modal
        var sessionName = <%- JSON.stringify(sessionName) %> ;
        // get token needed by OpenVidu
        var token = <%- JSON.stringify(token) %> ;
        // get nickname of user to show to other users and the user itself
        var nickName = <%- JSON.stringify(nickName) %> ;
        // get unique username to diffrentiate between users
        var userName = <%- JSON.stringify(userName) %> ;
        // get meeting name to display on navbar
        var meetingName = <%- JSON.stringify(meetingName) %> ;

        // check if user is signed in
        var signName = nickName;
        var accountID = "";
        var signphotoUrl = "";
        firebase.auth().onAuthStateChanged(function(user) {
          if (user) {
            // User is signed in.
            signName = user.displayName;
            signphotoUrl = user.photoURL;
            accountID = user.uid;
            $("#prevMeetingList_sideBar").empty();
            $("#prevMeetingList_sideBar").addClass()
            var spinner = document.createElement("div");
            spinner.setAttribute("role", "status");
            spinner.style.display = "inline-block";
            spinner.className = "spinner-border text-light align-middle";
            spinner.innerHTML = '<span class="sr-only">Loading...</span>';
            spinner.style.height = "4rem";
            spinner.style.width = "4rem";
            document.getElementById("prevMeetingList_sideBar").appendChild(spinner);
            var data_ajax = {
                userUID: accountID,
            }
            $.ajax({
                url: "https://" + window.location.hostname + "/api/user/prevMeetings",
                type: "POST",
                data: data_ajax,
                error: function (err) {
                    console.log(err);                    
                }
            }).done(function(data) {
                console.log(data);
                $("#prevMeetingList_sideBar").empty();
                var prev_meeting_container = document.createElement("div");
                prev_meeting_container.setAttribute("id", "prev_meeting_container");
                prev_meeting_container.style.marginTop = "20px";
                prev_meeting_container.setAttribute("overflow-y", "auto")
                data.forEach(function (item, index) {
                    var card = document.createElement("div");
                    card.className = "card";
                    card.setAttribute("id", "card-" + item.meeting_id.toString());
                    var card_body = document.createElement("div");
                    card_body.className = "card-body p-2";
                    card_body.setAttribute("id", "card-body-" + item.meeting_id.toString());
                    var card_title = document.createElement("div");
                    card_title.className = "card-title";
                    card_title.innerHTML =  "<div style='display: inline-block'>" + item.meeting_name + "</div>"
                    card_title.style.fontSize = "75%";
                    card_title.style.marginBottom = "0";
                    var button_group = document.createElement("div");
                    button_group.style.display = "inline-block";
                    button_group.style.float = "right";
                    button_group.setAttribute("id", "button-group-prev-" + item.meeting_id.toString());
                    var button_chat = document.createElement("button");
                    button_chat.className = "btn btn-primary btn-sm";
                    button_chat.setAttribute("id", "button-chat-prev-" + item.meeting_id.toString());
                    button_chat.innerHTML = '<i class="fas fa-comment-alt"></i>';
                    button_chat.style.backgroundColor = "#7D7C46";
                    button_chat.style.borderColor = "#7D7C46";
                    var button_delete = document.createElement("button");
                    button_delete.className = "btn btn-danger btn-sm";
                    button_delete.setAttribute("id", "button-delete-prev-" + item.meeting_id.toString());
                    button_delete.style.marginLeft = "10px;"
                    button_delete.innerHTML = '<i class="fa fa-close" style="color:white; font-size: 75%;"></i>'
                    button_group.appendChild(button_chat);
                    button_group.appendChild(button_delete);
                    card_body.appendChild(card_title);
                    card_title.appendChild(button_group);
                    card.appendChild(card_body);
                    prev_meeting_container.appendChild(card);
                });
                document.getElementById("prevMeetingList_sideBar").appendChild(prev_meeting_container);
            });
          }
        }, function(error) {
          console.log(error);
        });

        // keep track of video and audio status using booleans
        var audio = true;
        var video = true;
        // keep connection list for private chat and others
        var connection_list = {};
        // keep list for active user to be displayed on main container
        var active_users = {};
        
        var markdown_to_html_con = new showdown.Converter();
        
        var chat_audio_notification = document.getElementById("chat-audio");
        
        var mouse_on_meetingOptions = false;
        
        var meetingOptionUserimout;
        var notification_timeout;

        $(document).ready(function () {
            var firepadRef = firebase.database().ref().child("firepad").child(sessionName);
            var codeMirror = CodeMirror(document.getElementById('firepad'), { lineWrapping: true });
            var firepad = Firepad.fromCodeMirror(firepadRef, codeMirror,
                { richTextShortcuts: true, richTextToolbar: true, defaultText: '' });
        });

        // activate all tooltips
        $('[data-toggle="tooltip"]').tooltip();
        // set url of #share_meeting_link
        $("#share_meeting_link").html(" https://" + window.location.hostname + "/?todo=join&id_=" + sessionName);
        $("#share_meeting_link").attr("href", "https://" + window.location.hostname + "/?todo=join&id_=" + sessionName);
        
        $("#refreshButton").attr("disabled", true);
        
        // initialize every thing
        init_every_time();
        // every time window resizes, initialize every thing
        $(window).resize(init_every_time);

        $( window ).on( "orientationchange", function( event ) {
            // alert("orientaion changed");
            setTimeout(init_every_time, 200);
        });
        
        $("#video_container").mousemove(function (event) {
            wakeMeetingOptions();
        });
        $("#video_container").on("tap", function () {
            wakeMeetingOptions();
        })
        
        $("#chat-everybody").show();
        
        $("#everybody").click(function () {
            $(".chat-person").removeClass("active");
            $(this).addClass("active");
            $(".chat-messages").hide();
            $("#chat-everybody").show();
            //$("#message-to-send").attr("placeholder", "Talk to Everybody");
            $("#card-header-chat").text("Everybody");
            $("#everybody").removeClass("new-message-came");
        })
        
        var message_textarea = new SimpleMDE({ element: $("#message-to-send")[0] });
        
        $("#main-container").click( function () {
            closeSidePanel();           
        })
        
        $("#meetingOptionsButton_User").hover(function () {
            mouse_on_meetingOptions = true;
        }, function () {
            mouse_on_meetingOptions = false;
        })

        // function init_every_time
        function init_every_time() {            
            // set height of meeting extra options
            var height_of_meetingExtraOptions = $(window).height() - $("#navbar_session").height() - 8;
            $(".meetingOptionsExtra").css("height", height_of_meetingExtraOptions.toString() + "px");
            $("#participantList_sideBar").css("height", height_of_meetingExtraOptions.toString() + "px");
            $("#prevMeetingList_sideBar").css("height", height_of_meetingExtraOptions.toString() + "px");
            $("#video_container").css("height", height_of_meetingExtraOptions.toString() + "px")

            // set width of main container
            var max_width_video_container = $(window).width() - 60;
            $("#video_container").css("width", max_width_video_container.toString() + "px");

            // toggle participant list if open
            if ($("#participantList_sideBar").width() > 10) {
                toggleParticipantList();
            }
            // set margin of main container as 50px
            $("#video_container").css("margin-left", "60px");
            takeCareOfGridView();
            
            $("#meetingOptionsButton_User").css("margin-bottom", "-70px");  
            // 60 - (16 x 2)
            $("#refreshButton").width("28px")
        }
            
        function wakeMeetingOptions() {
            clearTimeout(meetingOptionUserimout);
//            $("#meetingOptionsButton_User").animate({marginBottom: "0px"});
//            meetingOptionUserimout = setTimeout(function () {
//                $("#meetingOptionsButton_User").animate({marginBottom: "-70px"});
//            }, 100);
            if (parseInt($("#meetingOptionsButton_User").css('margin-bottom').replace("px", "")) < -69) {
                $("#meetingOptionsButton_User").animate({marginBottom: "0px"});   
            }
            meetingOptionUserimout = setTimeout(function () {
                if (parseInt($("#meetingOptionsButton_User").css('margin-bottom').replace("px", "")) > -1) {
                    if (!mouse_on_meetingOptions || $(window).width() < 576) {
                        $("#meetingOptionsButton_User").animate({marginBottom: "-70px"});  
                    }
                }
            }, 1000)
        }

        // initialize OpenVidu
        OV = new OpenVidu();
        // start session
        session = OV.initSession();

        // function ran when public chat message recvied
        session.on('signal:chat', (event) => {
            // split values
            var seprated_values = event.data.split(",")
            var from_name = seprated_values[0];
            var from_id = seprated_values[1];
            var message_to_slice = event.data.slice(event.data.indexOf(",") + 1, event.data.length);
            var message = message_to_slice.slice(message_to_slice.indexOf(",") + 1, message_to_slice.length);

            // create html template of message
            var html_string;
            if (from_id === userName.toString()) {
                html_string = '<div class="card shadow-sm message_sent" style="background-color:#5cb3db; white-space: pre;"><div class="card-body text-wrap p-1"><p style="font-family: Questrial, sans-serif;" class="user-name-chat-message">You:</p> ' + markdown_to_html_con.makeHtml(message) + '</div></div>'
            } else {
                html_string = '<div class="card message_sent shadow-sm"><div class="card-body text-wrap p-1"><p style="font-family: Questrial, sans-serif;" class="user-name-chat-message">' + from_name + ':</p>' + markdown_to_html_con.makeHtml(message) + '</div></div>'
            }
            // append html template with message in DOM
            $("#chat-everybody").append(html_string);
            var everybody_chat = document.getElementById("chat-everybody");
            // scroll to bottom when new message recv
            everybody_chat.scrollTop = everybody_chat.scrollHeight;
            if ($("#sidePanel").width() < 10) {
                if (!$("#everybody").hasClass("active")) {
                    $("#everybody").addClass("new-message-came");
                }
                chat_audio_notification.pause();
                chat_audio_notification.currentTime = 0;
                chat_audio_notification.play();
                // <div class="snackbar-info text-truncate" id="notification"></div>
                var div = document.createElement("div");
                if ($(".snackbar-info").hasClass("show")) {
                    div.className = "snackbar-info text-truncate";
                    div.sytle.visibility = "visible";
                } else {
                    div.className = "snackbar-info text-truncate show";
                }
                div.innerHTML = "<i class='fas fa-comment-alt red-chat'></i> New Group Message"
                $(".snackbar-info").remove();
                document.getElementById("snackbar-info-container").appendChild(div);
                clearTimeout(notification_timeout);
                notification_timeout = setTimeout(function () {
                    $(".snackbar-info").remove();
                }, 2500);
                $("#chat-open-close").addClass("red-chat");
            } else {
                if (!$("#everybody").hasClass("active")) {
                    $("#everybody").addClass("new-message-came");
                    chat_audio_notification.pause();
                    chat_audio_notification.currentTime = 0;
                    chat_audio_notification.play();
                }
            }
        })

        // function ran when private chat message has been recv
        session.on('signal:private-chat', (event) => {
            // split values
            var seprated_values = event.data.split(",")
            var from_name = seprated_values[0];
            var from_id = seprated_values[1];
            var message_to_slice = event.data.slice(event.data.indexOf(",") + 1, event.data.length);
            var message = message_to_slice.slice(message_to_slice.indexOf(",") + 1, message_to_slice.length);
            // create html template
            var html_string = '<div class="card shadow-sm message_sent" style="white-space: pre;"><div class="card-body text-wrap p-1"><p style="font-family: Questrial, sans-serif;" class="user-name-chat-message">' + from_name + ':</p> ' + markdown_to_html_con.makeHtml(message) + '</div></div>'
            // append html template with message to DOM
            $("#chat-" + event.from.connectionId).append(html_string);
            // scroll to bottom when new message has been recv            
            var message_body = document.getElementById("chat-" + event.from.connectionId);
            message_body.scrollTop = message_body.scrollHeight;              
            if ($("#sidePanel").width() < 10) {
                // <div id="snackbar-info" class="text-truncate"></div>
                if (!$("#" + event.from.connectionId).hasClass("active")) {
                    $("#" + event.from.connectionId).addClass("new-message-came");
                }
                chat_audio_notification.pause();
                chat_audio_notification.currentTime = 0;
                chat_audio_notification.play();
                var div = document.createElement("div");
                if ($(".snackbar-info").hasClass("show")) {
                    div.className = "snackbar-info text-truncate";
                    div.sytle.visibility = "visible";
                } else {
                    div.className = "snackbar-info text-truncate show";
                }
                div.innerHTML = "<i class='fas fa-comment-alt red-chat'></i> New Group Message"
                $(".snackbar-info").remove();
                document.getElementById("snackbar-info-container").appendChild(div);
                clearTimeout(notification_timeout);
                notification_timeout = setTimeout(function () {
                    $(".snackbar-info").remove();
                }, 2500);
                $("#chat-open-close").addClass("red-chat");
            } else {
                if (!$("#" + event.from.connectionId).hasClass("active")) {
                    $("#" + event.from.connectionId).addClass("new-message-came");
                    chat_audio_notification.pause();
                    chat_audio_notification.currentTime = 0;
                    chat_audio_notification.play();
                }
            }
        });

        // function ran when somebody changed their stream status
        session.on('signal:streamStatus', (event) => {
            var connectionId = event.from.connectionId;      

            if (connection_list[connectionId]) {
                var data = event.data.split(",");
                console.log("Data: " + data);
                connection_list[connectionId][audio] = data[0] === "1";
                connection_list[connectionId][video] = data[1] === "1";
                try {
                    var audio_of_other_user = $(".voice-toggle-" + connectionId);
                    var video_of_other_user = $(".video-toggle-" + connectionId);
                    if (data[0] === "1") {
                        audio_of_other_user.html('<i class="fas fa-microphone"></i>');
                    } else {
                        audio_of_other_user.html('<i class="fas fa-microphone-slash"></i>'); 
                    }
                    if (data[1] === "1") {
                        $(".profile-photo-" + connectionId).css("display", "none");
                        video_of_other_user.html('<i class="fas fa-video"></i>');
                    } else {
                        $(".profile-photo-" + connectionId).css("display", "block");
                        video_of_other_user.html('<i class="fas fa-video-slash"></i>');
                    }
                } catch(err) {
                    console.log(err);
                    console.log(connectionId);
                }
            }
        });

        // function ran when somebody forces change to our streams
        session.on('signal:userControlMessage', (event) => {
            var data_split = event.data.split(",");
            console.log(data_split);
            if (data_split[0] === "audio") {
                if (data_split[1] === "0") {
                    if (audio) {
                        toggleAudio()
                    }
                } else {
                    if (!audio) {
                        toggleAudio()
                    }
                }
            } else if (data_split[0] === "video") {
                if (data_split[1] === "0") {
                    if (video) {
                        toggleVideo();
                    }
                } else {
                    if (!video) {
                        toggleVideo();
                    }
                }
            } else {
                $("#buttonLeaveSession").click()
            }
        })

        // function ran when new user connects
        session.on('streamCreated', (event) => {
            // subscribe to it's stream
            var subscriber = session.subscribe(event.stream, undefined);
            // create html template to put in participant list
            var card_participant = document.createElement("div");
            card_participant.className = "card p-0";
            var card_body = document.createElement("div");
            card_body.setAttribute("id", "card-body-" + event.target.connection.connectionId);
            card_body.className = "card-body p-0 text-center";
            var video = document.createElement("video");
            video.setAttribute("id", "vid-" + event.target.connection.connectionId);
            video.className = "video-user"; 
            card_body.appendChild(video);
            card_participant.appendChild(card_body);
            document.getElementById("participantList_sideBar").appendChild(card_participant);
            // connect OpenVidu with video element
            subscriber.addVideoElement(video);
            // apend user data and buttons to the video
            appendUserData(video, subscriber.stream.connection, card_participant);
            $("#refreshButton").attr("disabled", false);
        });

        // function ran when some user disconnect's stream the meeting
        session.on('streamDestroyed', (event) => {
            // remove user data
            removeUserData(event.stream.connection);
            // delete user from connection list
            delete connection_list[event.stream.connection.connectionId];
        });

        // function ran when new connection is created
        session.on('connectionCreated', (event) => {
            // append to connection list
            connection_list[event.connection.connectionId] = {connection: event.connection, audio: true, video: true};
        });

        // function ran when some user exits meeting
        session.on('connectionDestroyed', (event) => {
            // delete from connection list
            delete connection_list[event.connection.connectionId];
        });
        
        session.on('sessionDisconnected', (event) => {
            if (event.reason === 'networkDisconnect') {
                $("#refreshButton").click();
            }
        });

        // join meeting
        session.connect(token, {
                clientData: nickName
            })
            .then(() => {
                // init publisher
                publisher = OV.initPublisher(undefined, {
                    audioSource: undefined,
                    videoSource: undefined,
                    publishAudio: true,
                    publishVideo: true,
                    resolution: '640x480',
                    frameRate: 30,
                    insertMode: 'APPEND',
                    mirror: false
                });
                // create html template for user
                var card_participant = document.createElement("div");
                card_participant.setAttribute("id", "card-mine");
                card_participant.className = "card p-0";
                var card_body = document.createElement("div");
                card_body.setAttribute("id", "card-body-mine");
                card_body.className = "card-body p-0";
                $(card_body).css("text-align", "center")
                var video = document.createElement("video");
                video.setAttribute("id", "vid-mine");
                video.className = "video-user"; 
                card_body.appendChild(video);
                card_participant.appendChild(card_body);
                document.getElementById("participantList_sideBar").appendChild(card_participant);
                // set timeout of 5000 to connect video to OpenVidu and append user data and publish user's stream
                setTimeout(function () {
                    publisher.addVideoElement(video);
                    var userData = {
                        nickName: nickName,
                        userName: userName
                    };
                    appendUserData(video, userData, card_participant);
                    $(video).prop('muted', true);
                    session.publish(publisher);
                }, 5000);
            })
            .catch(error => {
                // log error if there
                console.warn('There was an error connecting to the session:', error.code, error.message);
            });

        // function ran when user presses exit meeting button
        function leaveSession() {
            // disconnet the session
            session.disconnect();
        }

        // function ran when toggle audio button is pressed
        function toggleAudio() {
            if (audio) {
                // change boolean
                audio = false;
                // change icon
                document.getElementById("toggleAudio").innerHTML = '<i class="fas fa-microphone-slash"></i>';
                // stop publishing stream
                publisher.publishAudio(false);
            } else {
                // change boolean
                audio = true;
                // change icon
                document.getElementById("toggleAudio").innerHTML = '<i class="fas fa-microphone"></i>';
                // start publishing audio
                publisher.publishAudio(true);
            }
            var audio_return = "0"
            if (audio) {
                audio_return = "1";
            }
            var video_return= "0";
            if (video) {
                video_return = "1";
            }
            sendStreamStatusMessage(audio_return + "," + video_return);
        }

        // function ran when toggle video button is pressed
        function toggleVideo() {
            if (video) {
                // change boolean
                video = false;
                // change icon
                document.getElementById("toggleVideo").innerHTML = '<i class="fas fa-video-slash"></i>';
                // show user profile
                $(".profile-photo-" + connectionId).css("display", "block");
                // stop publishing audio
                publisher.publishVideo(false);
            } else {
                // change boolean
                video = true;
                // change icon
                document.getElementById("toggleVideo").innerHTML = '<i class="fas fa-video"></i>';
                // hide user profile
                $(".profile-photo-" + connectionId).css("display", "none");
                // start publishing video
                publisher.publishVideo(true);
            }
            var audio_return = "0"
            if (audio) {
                audio_return = "1";
            }
            var video_return= "0";
            if (video) {
                video_return = "1";
            }
            sendStreamStatusMessage(audio_return + "," + video_return);
        }
        
        function toggleSidePanel () {
            if ($("#sidePanel").width() > 10) {
                closeSidePanel();
            } else {
                openSidePanel();
            }
        }

        // function ran when sidepanel has to close
        function closeSidePanel() {
            document.getElementById("sidePanel").style.width = "0px";
        }

        // function ran when sidepanel has to open
        function openSidePanel() {
            if ($(window).width() < 576) {
                document.getElementById("sidePanel").style.width = $(window).width().toString() + "px";
            } else {
                document.getElementById("sidePanel").style.width = "400px";
            }
            $("#chat-open-close").removeClass("red-chat");
        }

        // toggle participant list function ran when user click participant list button
        function toggleParticipantList() {
            // check if taget element is open
            if ($("#participantList_sideBar").width() < 10 && $("#prevMeetingList_sideBar").width() < 10) {
                // taget element is close
                // check how much space should the participant list take
                var width_of_part_list;
                if ($(window).width() <= 768) {
                    var width_screen = $(window).width() - 60;
                    $("#participantList_sideBar").animate({width: width_screen.toString() + "px"});
                    width_of_part_list = width_screen;
                } else if ($(window).width() <= 992) {
                    $("#participantList_sideBar").animate({width: "25%"});
                    width_of_part_list = $(window).width() * (1 / 4) + 60;
                } else {
                    $("#participantList_sideBar").animate({width: "15%"});
                    width_of_part_list = $(window).width() * (15 / 100) + 60;
                }
                $("#video_container").animate({marginLeft: width_of_part_list.toString()});
                var width_main_container = $(window).width() - width_of_part_list;
                $("#video_container").animate({width: width_main_container});
            } else if ($("#prevMeetingList_sideBar").width() > 10) {
                $("#prevMeetingList_sideBar").width("0");
                var width_of_part_list;
                var width_screen = $(window).width() - 60;
                if ($(window).width() <= 768) {
                    $("#participantList_sideBar").width(width_screen.toString() + "px");
                    width_of_part_list = width_screen;
                } else if ($(window).width() <= 992) {
                    var width_to_set = width_screen * 0.25
                    $("#participantList_sideBar").width(width_to_set.toString() + "px");
                    width_of_part_list = $(window).width() * (1 / 4) + 60;
                } else {
                    var width_to_set = width_screen * 0.15;
                    $("#participantList_sideBar").animate(width_to_set.toString() + "px");
                    width_of_part_list = $(window).width() * (15 / 100) + 60;
                }
                $("#video_container").css("marginLeft", width_of_part_list.toString() + "px");
                var width_main_container = $(window).width() - width_of_part_list;
                $("#video_container").width(width_main_container);
            } else {
                // taget element is open
                // close target element
                $("#participantList_sideBar").animate({width: "0"});
                var width_of_extraOptions = 60;
                $("#video_container").animate({marginLeft: width_of_extraOptions.toString() + "px"});
                var width_main_container = $(window).width() - width_of_extraOptions;
                $("#video_container").animate({width: width_main_container});
            }
        }

        function togglePrevMeetings() {
            if ($("#prevMeetingList_sideBar").width() < 10 && $("#participantList_sideBar").width() < 10) {
                // taget element is close
                // check how much space should the participant list take
                var width_of_prev_list;
                if ($(window).width() <= 768) {
                    var width_screen = $(window).width();
                    $("#prevMeetingList_sideBar").animate({width: width_screen.toString() + "px"});
                    width_of_prev_list = width_screen;
                } else if ($(window).width() <= 992) {
                    $("#prevMeetingList_sideBar").animate({width: "25%"});
                    width_of_prev_list = $(window).width() * (1 / 4) + 60;
                } else {
                    $("#prevMeetingList_sideBar").animate({width: "15%"});
                    width_of_prev_list = $(window).width() * (15 / 100) + 60;
                }
                var width_of_accordtion = width_of_prev_list - 70;
                $("#prev_meeting_container").animate({width: width_of_accordtion.toString() + "px"});
                $("#video_container").animate({marginLeft: width_of_prev_list.toString()});
                var width_main_container = $(window).width() - width_of_prev_list;
                $("#video_container").animate({width: width_main_container});
            } else if ($("#participantList_sideBar").width() > 10) {
                $("#participantList_sideBar").width("0");
                var width_of_prev_list;
                var width_screen = $(window).width();
                if ($(window).width() <= 768) {
                    $("#prevMeetingList_sideBar").width(width_screen.toString() + "px");
                    width_of_prev_list = width_screen;
                } else if ($(window).width() <= 992) {
                    var width_to_set = width_screen * 0.25
                    $("#prevMeetingList_sideBar").width(width_to_set.toString() + "px");
                    width_of_prev_list = $(window).width() * (1 / 4) + 60;
                } else {
                    var width_to_set = width_screen * 0.15;
                    $("#prevMeetingList_sideBar").width(width_to_set.toString() + "px");
                    width_of_prev_list = $(window).width() * (15 / 100) + 60;
                }
                var width_of_accordtion = width_of_prev_list - 70;
                $("#prev_meeting_container").width(width_of_accordtion.toString() + "px");
                $("#video_container").css("marginLeft", width_of_prev_list.toString() + "px");
                var width_main_container = $(window).width() - width_of_prev_list;
                $("#video_container").width(width_main_container);
            } else {
                // taget element is open
                // close target element
                $("#prevMeetingList_sideBar").animate({width: "0"});
                $("#prev_meeting_container").animate({width: "0"});
                var width_of_extraOptions = 60;
                $("#video_container").animate({marginLeft: width_of_extraOptions.toString()});
                var width_main_container = $(window).width() - width_of_extraOptions;
                $("#video_container").animate({width: width_main_container});
            }
        }

        // function ran when user clicks on whiteboard button
        function whiteboard_open() {
            $('#whiteboard_model').modal({
                keyboard: false
            });
            // initialize stream of white board
            whiteboard_share();
        }

        // function ran when user clicks on collab
        function collabOpen() {
            $("#collab").modal({
                keyboard: false
            })
        }

        // function ran when user clicks on share button
        function shareMeeting() {
            $("#share_meeting_modal").modal()
        }

        // function ran when user clicks on send message button
        function sendMessage() {
            // get message
//            var message = $("#message-to-send").val();
            var message = message_textarea.value();
            // check if message is empty
            if (message.trim() !== "") {
                // get recver of message
                var to = $(".chat-person.active").attr("id");
                // check if recver of message is empty
                if (to === "everybody") {
                    // send message to every one
                    session.signal({
                        data: nickName + "," + userName + "," + message,
                        to: [],
                        type: "chat",
                    }).then(() => {
                        var data = {
                            sessionId: sessionName,
                            from: nickName,
                            from_account: accountID,
                            to: "Everyone",
                            message: message,
                        }
                        $.ajax({
                            type: "POST",
                            url: "https://" + window.location.hostname + "/session/saveMessage/",
                            data: data,
                            success: function () {},
                            error: function(err) {console.log(err);}
                        })
                    }).catch((error) => {})
//                    var message_group = document.getElementById("#everybody-chat");
//                    // scroll to bottom
//                    message_group.scrollTop = message_group.scrollHeight;
                } else {
                    // send message to particular person
                    session.signal({
                        data: nickName + "," + userName + "," + message,
                        to: [connection_list[to].connection],
                        type: "private-chat",
                    }).then(() => {}).catch((error) => {
                        console.log(error);
                    })
                    // create html template to render in the users page
                    var html_string = '<div class="card shadow-sm message_sent" style="white-space: pre;background-color:#5cb3db;"><div class="card-body text-wrap p-1"><p style="font-family: Questrial, sans-serif;" class="user-name-chat-message">You:</p>' + markdown_to_html_con.makeHtml(message) + '</div></div>';
                    // append html template with message to DOM
                    $("#chat-" + to).append(html_string);
                    // scroll to bottom
                    var message_group = document.getElementById("chat-" + to);
                    message_group.scrollTop = message_group.scrollHeight;
                }
            }
            // reset message value
//            $("#message-to-send").val("");
            message_textarea.value("");
        }

        // send streamStatus message
        function sendStreamStatusMessage(streamStatus) {
            // send stream status to everybody
            session.signal({
                data: streamStatus,
                to: [],
                type: "streamStatus"
            }).then(() => {}).catch(err => {
                // log error if there
                console.log(err);                
            })
        }

        // send User Control Message
        function sendUserControlMessage(connectionId, controlType, status) {
            // send User control message to the person
            session.signal({
                data: controlType + "," + status,
                to: [connection_list[connectionId].connection],
                type: "userControlMessage",
            }).then(() => {}).catch(err => {
                // log error if there
                console.log(err);                
            })
        }

        // function called when user presses share screen button
        function screenShare() {
            // get screen media stream
            OV.getUserMedia({
                audioSource: undefined,
                videoSource: "screen",
                publishAudio: true,
                publishVideo: true,
                resolution: '640x480',
                frameRate: 30,
                insertMode: 'APPEND',
                mirror: false
            }).then(mediaStream => {
                // get video track of media stream
                var screenTrack = mediaStream.getVideoTracks()[0];
                // replace current track with media stream's video track
                publisher.replaceTrack(screenTrack).then(() => {}).catch((err) => {
                    // log error if any
                    console.log(err);
                });
                // function ran when screen share ends
                screenTrack.addEventListener('ended', () => {
                    // switch back to video and audio
                    backToVideoAudio();
                })
            }).catch((err) => {
                // log error if there
                console.log(err);
            })
        }

        // function ran at whiteboard_open()
        function whiteboard_share() {
            // get canvas's video track at 30 fps
            var canvasStream = document.getElementById('defaultCanvas0').captureStream(30).getVideoTracks()[0];
            OV.getUserMedia({
                audioSource: undefined,
                videoSource: canvasStream,
                publishAudio: true,
                publishVideo: true,
                resolution: '640x480',
                frameRate: 30,
                insertMode: 'APPEND',
                mirror: false
            }).then(mediaStream => {
                // get video tracks of media stream
                var screenTrack = mediaStream.getVideoTracks()[0];
                // replace current video track with video track of canvas
                publisher.replaceTrack(screenTrack).then(() => {}).catch((err) => {
                    // log error if there
                    console.log(err);
                });
            }).catch((err) => {
                // log error if there
                console.log(err);
            })
        }

        // function to swicth back to video and audio ran at screenShare() and 
        // when user clicks close at whiteboard model
        function backToVideoAudio() {
            // get video and audio media stream
            OV.getUserMedia({
                audioSource: undefined,
                videoSource: undefined,
                publishAudio: audio,
                publishVideo: video ,
                resolution: '640x480',
                frameRate: 30,
                insertMode: 'APPEND',
                mirror: false
            }).then(videoStream => {
                // get video tracks of media stream
                var videoTrack = videoStream.getVideoTracks()[0];
                // replace current video track with video track of video and audio
                publisher.replaceTrack(videoTrack).then(() => {}).catch((err) => {
                    // log error if there
                    console.log(err);
                });
            })
        }

        function openFullscreen(elem) {
            if (elem.requestFullscreen) {
                elem.requestFullscreen();
            } else if (elem.mozRequestFullScreen) { /* Firefox */
                elem.mozRequestFullScreen();
            } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */
                elem.webkitRequestFullscreen();
            } else if (elem.msRequestFullscreen) { /* IE/Edge */
                elem.msRequestFullscreen();
            }
        }

        // function ran when user joins meeting or other user joins meeting
        function appendUserData(videoElement, connection, card_element) {
            videoElement.muted = true;
            // get important data
            var clientData; // nickname
            var serverData; // user name
            var nodeId; // connection id
            if (connection.nickName) {
                clientData = connection.nickName;
                serverData = connection.userName;
                nodeId = 'mine';
            } else {
                clientData = JSON.parse(connection.data.split('%/%')[0]).clientData;
                serverData = JSON.parse(connection.data.split('%/%')[1]).serverData;
                nodeId = connection.connectionId;
            }

            videoElement.id = "vid-" + nodeId;
            videoElement.parentNode.id = "card-body-" + nodeId;

            // create html template
            card_element.setAttribute("id", "card-" + nodeId);
            var card_header = document.createElement("div");
            card_header.className = "card-header p-1";
            card_header.setAttribute("id", "card-header-" + nodeId)
            card_header.innerHTML = '<p class="nickName">' + clientData + '</p><p class="userName">' + serverData + '</p>';
            card_element.insertBefore(card_header, videoElement.parentNode);

            var img_represent_user = document.createElement("img");
            img_represent_user.setAttribute("id", "img-" + nodeId);
            videoElement.parentNode.appendChild(img_represent_user);


            // create button group for private chat, toggle video, toggle audio, and drop that user out of meeting 
            // if it is not the user itelf
            if (nodeId !== 'mine') {                
                var buttonGroupInstance = new ButtonGroupControlUser(nodeId, "part");
                buttonGroupInstance.addChatListner(function () {
                    $("#"+ nodeId).click();
                    setTimeout(function () {
                        openSidePanel();
                    }, 500);
                });
                buttonGroupInstance.addVideoListner(function () {
                    if (buttonGroupInstance.video_toggle.innerHTML.includes('fa-video-slash')) {
                        sendUserControlMessage(nodeId, "video", "1");
                    } else {
                        sendUserControlMessage(nodeId, "video", "0");
                    }
                });
                buttonGroupInstance.addVoiceListner(function () {
                    if (buttonGroupInstance.voice_toggle.innerHTML.includes('fa-microphone-slash')) {
                        sendUserControlMessage(nodeId, "audio", "1");
                    } else {
                        sendUserControlMessage(nodeId, "audio", "0");
                    }
                });
                buttonGroupInstance.addDropListner(function () {
                    sendUserControlMessage(nodeId, "drop", "force");
                });
                buttonGroupInstance.button_list.style.bottom = "10px"
                videoElement.parentNode.appendChild(buttonGroupInstance.button_list);
                
                // show button group when user hovers on the video
                $(videoElement.parentNode).hover(function () {
                    $(videoElement).css("opacity", "0.3");
                    $(buttonGroupInstance.button_list).css("display", "block");
                }, function () {
                    $(videoElement).css("opacity", "1");
                    $(buttonGroupInstance.button_list).css("display", "none");
                })
                // <button class="chat-person active" id="everybody">Everybody</button>
                $("#tabs-chat").append('<button class="chat-person text-truncate" id="' + nodeId + '">' + clientData + '</button>');
                $("#all-chats").append('<div class="chat-messages private-chat" id="chat-' + nodeId + '"></div>');
                $('#' + nodeId).click(function () {
                    $(".chat-person").removeClass("active");
                    $(this).addClass("active");
                    $(".chat-messages").hide();
                    $("#chat-" + nodeId).show();
                    //$("#message-to-send").attr("placeholder", "Talk with " + clientData);
                    $("#card-header-chat").text(clientData);
                    $("#" + nodeId).removeClass("new-message-came");
                })
            }

            // add db click listner to full screen video
            videoElement.parentNode.ondbclick = function () {
                openFullscreen(videoElement);
            }

            $(card_element).css("margin", "10px");
            initMainVidsActivator(videoElement, nodeId, clientData);            
        }

        function initMainVidsActivator(videoElement, nodeId, clientData) {
            if (videoElement.srcObject) {
                initMainVids(videoElement, nodeId, clientData);
            } else {
                setTimeout(initMainVidsActivator, 1000, videoElement, nodeId, clientData);
            }
        }

        // function ran in appendUserData()
        function initMainVids(videoElement, nodeId, clientData) {
            var gridId = "gridViewVideoContainer";
            var col = document.createElement("div");
            col.className = "col fullSpaceGrid";
            col.setAttribute("id", "col-grid-" + nodeId);
            var videoGrid = document.createElement("video");
            videoGrid.setAttribute("id", "vid-grid-" + nodeId);
            videoGrid.className = "vid-grid-view video-user";
            videoGrid.style.margin = "10px";
            videoGrid.srcObject = videoElement.srcObject;
            if (nodeId === "mine") {
                videoGrid.muted = true;
            }
            videoGrid.play();
            col.appendChild(videoGrid);            
            if (nodeId !== "mine") {
                var header = document.createElement("p");
                header.className = "header-name";
                header.innerHTML = clientData;
                var buttonGroupInstance = new ButtonGroupControlUser(nodeId, "grid");
                buttonGroupInstance.addChatListner(function () {
                    $("#"+ nodeId).click();
                    setTimeout(function () {
                        openSidePanel();
                    }, 500);
                });
                buttonGroupInstance.addVideoListner(function () {
                    if (buttonGroupInstance.video_toggle.innerHTML.includes('fa-video-slash')) {
                        sendUserControlMessage(nodeId, "video", "1");
                    } else {
                        sendUserControlMessage(nodeId, "video", "0");
                    }
                });
                buttonGroupInstance.addVoiceListner(function () {
                    if (buttonGroupInstance.voice_toggle.innerHTML.includes('fa-microphone-slash')) {
                        sendUserControlMessage(nodeId, "audio", "1");
                    } else {
                        sendUserControlMessage(nodeId, "audio", "0");
                    }
                });
                buttonGroupInstance.addDropListner(function () {
                    sendUserControlMessage(nodeId, "drop", "force");
                });
                // show button group when user hovers on the video
                $(videoGrid.parentNode).hover(function () {
                    $(videoGrid).css("opacity", "0.3");
                    $(buttonGroupInstance.button_list).css("display", "block");
                    $(header).css("display", "block");
                }, function () {
                    $(videoGrid).css("opacity", "1");
                    $(buttonGroupInstance.button_list).css("display", "none");
                    $(header).css("display", "none");
                })
                col.appendChild(buttonGroupInstance.button_list);
                col.appendChild(header);
            }
            var profilePhoto = document.createElement("img");
            profilePhoto.src = "/static/home/images/person.png";
            profilePhoto.className = "profilePhoto-video-container profile-photo-" + nodeId;
            profilePhoto.setAttribute("id", "profile-photo-grid-" + nodeId);
            col.appendChild(profilePhoto);
            document.getElementById(gridId).appendChild(col);
            takeCareGridViewActivatorElementAdded(videoGrid);
            // document.getElementById(gridId).appendChild(videoGrid);
            // setTimeout(takeCareOfGridView, 5000);
            // takeCareOfGridView();
        }

        function takeCareGridViewActivatorElementAdded(videoElement) {
            if (videoElement.srcObject) {
                takeCareOfGridView();
            } else {
                setTimeout(takeCareGridViewActivatorElementAdded, 1000, videoElement);
            }
        }

        function takeCareOfGridView() {
            var height_of_grid = $(window).height() - $("#navbar_session").height() - 150;
            var gridId = "gridViewVideoContainer";
            var noParticipants = document.getElementById(gridId).childElementCount;
            $(".vid-grid-view").css("height", "100%");
            $(".vid-grid-view").css("width", "100%");
            var margin_bottom_grid = $("#navbar_session").height() + 100;
            $("#" + gridId).css("margin-bottom", margin_bottom_grid.toString() + "px");
            if ($(window).width() > 575) {
                $(".col").css("margin-bottom", "0px");
            } else {
                $(".col").css("margin-bottom", "50px");
            }
            if (noParticipants !== 0) {
                if (noParticipants === 1) {
                    $("#" + gridId).removeClass("row-cols-2");
                    if ($(window).width() > 575) {
                        $("#" + gridId).addClass("row-cols-1");
                    } else {
                        $("#" + gridId).addClass("row-cols-1");
                    }
                    $(".vid-grid-view").css("max-height", height_of_grid.toString() + "px");
                    $(".vid-grid-view").parent().css("max-height", height_of_grid.toString() + "px");
                    var max_width_video = $(window).width() - 75;
                    $(".vid-grid-view").css("max-width", max_width_video.toString() + "px");
                } else if (noParticipants === 2) {
                    $("#" + gridId).removeClass("row-cols-1");
                    $("#" + gridId).removeClass("row-cols-3");
                    if ($(window).width() > 575) {
                        $("#" + gridId).removeClass("row-cols-1");
                        $("#" + gridId).addClass("row-cols-2");
                        var max_width_video = ($(window).width() - 75 ) / 2;
                        $(".vid-grid-view").css("max-width", max_width_video.toString() + "px");
                    } else {
                        $("#" + gridId).removeClass("row-cols-2");
                        $("#" + gridId).addClass("row-cols-1");
                        var max_width_video = ($(window).width() - 75 );
                        $(".vid-grid-view").css("max-width", max_width_video.toString() + "px");
                    }
                    $(".vid-grid-view").css("max-height", height_of_grid.toString() + "px");
                    $(".vid-grid-view").parent().css("max-height", height_of_grid.toString() + "px");
                } else if (noParticipants === 3) {
                    $("#" + gridId).removeClass("row-cols-2");
                    if ($(window).width() > 575) {
                        $("#" + gridId).removeClass("row-cols-1");
                        $("#" + gridId).addClass("row-cols-2");
                        var max_width_video = ($(window).width() - 75 ) / 2;
                        $(".vid-grid-view").css("max-width", max_width_video.toString() + "px");
                    } else {
                        $("#" + gridId).removeClass("row-cols-3");
                        $("#" + gridId).addClass("row-cols-1");
                        var max_width_video = ($(window).width() - 75 );
                        $(".vid-grid-view").css("max-width", max_width_video.toString() + "px");
                    }
                    // var max_height_video = height_of_grid * 0.75;
                    var max_height_video = height_of_grid * 0.4;
                    $(".vid-grid-view").css("max-height", max_height_video.toString() + "px");
                    $(".vid-grid-view").parent().css("max-height", max_height_video.toString() + "px");
                } else if (noParticipants === 4) {
                    $("#" + gridId).removeClass("row-cols-3");
                    if ($(window).width() > 575) {
                        $("#" + gridId).removeClass("row-cols-1");
                        $("#" + gridId).addClass("row-cols-2");
                        var max_width_video = ($(window).width() - 75 ) / 2;
                        $(".vid-grid-view").css("max-width", max_width_video.toString() + "px");
                    } else {
                        $("#" + gridId).removeClass("row-cols-2");
                        $("#" + gridId).addClass("row-cols-1");
                        var max_width_video = ($(window).width() - 75 );
                        $(".vid-grid-view").css("max-width", max_width_video.toString() + "px");
                    }
                    // var max_height_video = height_of_grid * 0.75;
                    var max_height_video = height_of_grid * 0.4;
                    $(".vid-grid-view").css("max-height", max_height_video.toString() + "px");
                    $(".vid-grid-view").parent().css("max-height", max_height_video.toString() + "px");
                } else if (4 < noParticipants < 7) {
                    $("#" + gridId).removeClass("row-cols-2");
                    $("#" + gridId).removeClass("row-cols-4");
                    if ($(window).width() > 575) {
                        $("#" + gridId).removeClass("row-cols-1");
                        $("#" + gridId).addClass("row-cols-3");
                        var max_width_video = ($(window).width() - 75 ) / 3;
                        $(".vid-grid-view").css("max-width", max_width_video.toString() + "px");
                    } else {
                        $("#" + gridId).removeClass("row-cols-3");
                        $("#" + gridId).addClass("row-cols-1");
                        var max_width_video = ($(window).width() - 75 );
                        $(".vid-grid-view").css("max-width", max_width_video.toString() + "px");
                    }
                    // var max_height_video = height_of_grid * 0.75;
                    var max_height_video = height_of_grid * 0.4;
                    $(".vid-grid-view").css("max-height", max_height_video.toString() + "px");
                    $(".vid-grid-view").parent().css("max-height", max_height_video.toString() + "px");
                } else if (6 < noParticipants) {
                    $("#" + gridId).removeClass("row-cols-3");
                    if ($(window).width() > 575) {
                        $("#" + gridId).removeClass("row-cols-1");
                        $("#" + gridId).addClass("row-cols-4");
                        var max_width_video = ($(window).width() - 75 ) / 4;
                        $(".vid-grid-view").css("max-width", max_width_video.toString() + "px");
                    } else {
                        $("#" + gridId).addClass("row-cols-1");
                        $("#" + gridId).removeClass("row-cols-4");
                        var max_width_video = ($(window).width() - 75 );
                        $(".vid-grid-view").css("max-width", max_width_video.toString() + "px");
                    }
                    // var max_height_video = height_of_grid * 0.75
                    var max_height_video = height_of_grid * 0.4;
                    $(".vid-grid-view").css("max-height", max_height_video.toString() + "px");
                    $(".vid-grid-view").parent().css("max-height", max_height_video.toString() + "px");
                }
            }
            // $("#" + gridId).height(height_of_grid + 50);
        }

        // remove user data when any user disconnects
        function removeUserData(connection) {
            var nodeId = connection.connectionId;          
            document.getElementById("card-" + nodeId).remove();
            document.getElementById("col-grid-" + nodeId).remove();
            $("#chat-" + nodeId).remove();
            if ($("#" + nodeId).hasClass("active")) {
                $("#everybody").click()
            }
            $("#" + nodeId).remove();
            takeCareGridViewActivatorElementRemoved("#col-grid-" + nodeId);
            $("#refreshButton").attr("disabled", true);
            setTimeout(function () {
                if (Object.keys(connection_list).length > 1) {
                    console.log("Removing");
                    $("#refreshButton").attr("disabled", false);                
                }                
            }, 100);
        }

        function takeCareGridViewActivatorElementRemoved (elemId) {
            if ($(elemId).length) {
                setTimeout(takeCareGridViewActivatorElementRemoved, 1000, elemId);
            } else {
                takeCareOfGridView();
            }
        }

    </script>
</body>

</html>
